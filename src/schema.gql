# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Grade {
  """"""
  id: Int!
  name: String!
  pointGroup: Int!
  pointSingle: Int!
  pointHouse: Int!
  percentage: Int!
  candidateProgramme: CandidateProgramme!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Position {
  """"""
  id: Int!
  name: String!
  value: Int!
  pointGroup: Int!
  pointSingle: Int!
  pointHouse: Int!
  candidateProgramme: CandidateProgramme!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Skill {
  """"""
  id: Int!
  name: String!
  shortName: String!
  description: String
  programmes: [Programme!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Programme {
  """Example field (placeholder)"""
  id: Int!
  programCode: String!
  name: String!
  mode: Models!
  type: Types!
  groupCount: Int
  candidateCount: Int!
  date: DateTime
  venue: Int
  duration: Int!
  conceptNote: String!
  resultEntered: Boolean!
  resultPublished: Boolean!
  candidateProgramme: [CandidateProgramme!]!
  skill: Skill
  category: Category!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum Models {
  STAGE
  NON_STAGE
  OUTDOOR_STAGE
}

enum Types {
  SINGLE
  GROUP
  HOUSE
}

type CandidateProgramme {
  """"""
  id: Int!
  checkToReadNo: Int
  point: Int
  link: String
  groupNumber: Int
  markOne: Int
  markTwo: Int
  markThree: Int
  position: Position
  grade: Grade
  programme: Programme!
  candidate: Candidate!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Credential {
  id: Int!
  username: String!
  roles: [String!]!
  categories: [Category!]!
  team: Team
}

type Team {
  """"""
  id: Int!
  name: String!
  shortName: String!
  description: String
  color: String
  chestNoSeries: Int
  creadentials: [Credential!]
  candidates: [Candidate!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Candidate {
  """Example field (placeholder)"""
  id: Int!
  name: String!
  class: Int
  adno: Float
  dob: String
  chestNO: Int
  gender: Gender!
  candidateProgrammes: [CandidateProgramme!]
  team: Team
  category: Category
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

type CategorySettings {
  id: Int!
  maxProgram: Int!
  maxSingle: Int!
  minProgram: Int!
  minSingle: Int!
  maxGroup: Int!
  minGroup: Int!
  isProgrammeListUpdatable: Boolean!
  category: Category!
}

type Section {
  """"""
  id: Int!
  name: String!
  categories: [Category!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Category {
  """"""
  id: Int!
  name: String!
  settings: CategorySettings!
  candidates: [Candidate!]
  programmes: [Programme!]
  section: Section!
  credentials: [Credential!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Detail {
  """"""
  id: Int!
  name: String!
  motto: String!
  institution: String!
  logoId: String!
  coverId: String!
  description: String!
  isMediaHave: Boolean!
  isSkillHave: Boolean!
  isResultReady: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Query {
  candidates: [Candidate!]!
  candidate(id: Int!): Candidate!
  teams: [Team!]!
  team(id: Int!): Team!
  credentials: [Credential!]!
  credential(id: Int!): Credential!
  getCookieValue: String!
  categories: [Category!]!
  category(id: Int!): Category!
  sections: [Section!]!
  section(id: Int!): Section!
  programmes: [Programme!]!
  programme(id: Int!): Programme!
  skills: [Skill!]!
  skill(id: Int!): Skill!
  details: [Detail!]!
  grades: [Grade!]!
  grade(id: Int!): Grade!
  positions: [Position!]!
  position(id: Int!): Position!
  candidateProgrammes: [CandidateProgramme!]!
  candidateProgramme(id: Int!): CandidateProgramme!
  categorySettings: [CategorySettings!]!
  categorySetting(id: Int!): CategorySettings!
}

type Mutation {
  createCandidate(createCandidateInput: CreateCandidateInput!): Candidate!
  createManyCandidates(createCandidateInput: [CreateCandidateInput!]!): [Candidate!]!
  updateCandidate(updateCandidateInput: UpdateCandidateInput!): Candidate!
  removeCandidate(id: Int!): Candidate!
  createTeam(createTeamInput: CreateTeamInput!): Team!
  updateTeam(updateTeamInput: UpdateTeamInput!): Team!
  removeTeam(id: Int!): Team!
  createCredential(createCredentialInput: CreateCredentialInput!): Credential!
  updateCredential(updateCredentialInput: UpdateCredentialInput!): Credential!
  removeCredential(id: Int!): Credential!
  login(username: String!, password: String!): Credential!
  logout: Boolean!
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  updateCategory(updateCategoryInput: UpdateCategoryInput!): Category!
  removeCategory(id: Int!): Category!
  createSection(createSectionInput: CreateSectionInput!): Section!
  updateSection(updateSectionInput: UpdateSectionInput!): Section!
  removeSection(id: Int!): Section!
  createProgramme(createProgrammeInput: CreateProgrammeInput!): Programme!
  createManyProgrammes(createProgrammeInput: [CreateProgrammeInput!]!): [Programme!]!
  updateProgramme(updateProgrammeInput: UpdateProgrammeInput!): Programme!
  removeProgramme(id: Int!): Programme!
  setSchedule(createScheduleInput: CreateSchedule!): Programme!
  setManySchedule(createScheduleInput: [CreateSchedule!]!): [Programme!]!
  removeSchedule(code: Int!): Programme!
  createSkill(createSkillInput: CreateSkillInput!): Skill!
  updateSkill(updateSkillInput: UpdateSkillInput!): Skill!
  removeSkill(id: Int!): Skill!
  createDetail(createDetailInput: CreateDetailInput!): Detail!
  updateDetail(updateDetailInput: UpdateDetailInput!): Detail!
  createGrade(createGradeInput: CreateGradeInput!): Grade!
  updateGrade(updateGradeInput: UpdateGradeInput!): Grade!
  removeGrade(id: Int!): Grade!
  createPosition(createPositionInput: CreatePositionInput!): Position!
  updatePosition(updatePositionInput: UpdatePositionInput!): Position!
  removePosition(id: Int!): Position!
  createCandidateProgramme(createCandidateProgrammeInput: CreateCandidateProgrammeInput!): CandidateProgramme!
  updateCandidateProgramme(updateCandidateProgrammeInput: UpdateCandidateProgrammeInput!): CandidateProgramme!
  removeCandidateProgramme(id: Int!): CandidateProgramme!
  addNormalResult(programmeCode: String!, addResult: [AddResult!]!): [CandidateProgramme!]!
  liveResult: Int!
  createCategorySetting(createCategorySettingInput: CreateCategorySettingInput!): CategorySettings!
  updateCategorySetting(updateCategorySettingInput: UpdateCategorySettingInput!): CategorySettings!
  removeCategorySetting(id: Int!): CategorySettings!
}

input CreateCandidateInput {
  name: String!
  class: Int
  adno: Float
  dob: String
  chestNO: Int
  gender: Gender!
  team: String
  category: String
}

input UpdateCandidateInput {
  name: String
  class: Int
  adno: Float
  dob: String
  chestNO: Int
  gender: Gender
  team: String
  category: String
  id: Int!
}

input CreateTeamInput {
  name: String!
  shortName: String!
  description: String
  color: String
}

input UpdateTeamInput {
  name: String
  shortName: String
  description: String
  color: String
  id: Int!
}

input CreateCredentialInput {
  username: String!
  password: String!
  roles: [Roles!]!
  categories: [String!]
  team: String
}

enum Roles {
  NormalUser
  Admin
  Controller
  Media
  TeamManager
  Judge
}

input UpdateCredentialInput {
  username: String
  password: String
  roles: [Roles!]
  categories: [String!]
  team: String
  id: Int!
}

input CreateCategoryInput {
  name: String!
  section: String!
}

input UpdateCategoryInput {
  name: String
  section: String
  id: Int!
}

input CreateSectionInput {
  name: String!
}

input UpdateSectionInput {
  name: String
  id: Int!
}

input CreateProgrammeInput {
  programCode: String!
  name: String!
  mode: Mode!
  type: Type!
  groupCount: Int
  candidateCount: Int!
  date: String
  venue: Int
  duration: Int!
  conceptNote: String!
  skill: String!
  category: String!
}

enum Mode {
  STAGE
  NON_STAGE
  OUTDOOR_STAGE
}

enum Type {
  SINGLE
  GROUP
  HOUSE
}

input UpdateProgrammeInput {
  programCode: String
  name: String
  mode: Mode
  type: Type
  groupCount: Int
  candidateCount: Int
  date: String
  venue: Int
  duration: Int
  conceptNote: String
  skill: String
  category: String
  id: Int!
}

input CreateSchedule {
  code: String!
  date: DateTime!
  venue: Int
}

input CreateSkillInput {
  name: String!
  description: String!
  shortName: String!
}

input UpdateSkillInput {
  name: String
  description: String
  shortName: String
  id: Int!
}

input CreateDetailInput {
  name: String!
  motto: String!
  institution: String!
  description: String!
  isMediaHave: Boolean! = true
  isSkillHave: Boolean! = true
  logoId: String!
  coverId: String!
}

input UpdateDetailInput {
  name: String
  motto: String
  institution: String
  description: String
  isMediaHave: Boolean = true
  isSkillHave: Boolean = true
  logoId: String
  coverId: String
  id: Int!
}

input CreateGradeInput {
  name: String!
  percentage: Int!
  pointGroup: Int!
  pointSingle: Int!
  pointHouse: Int!
}

input UpdateGradeInput {
  name: String
  percentage: Int
  pointGroup: Int
  pointSingle: Int
  pointHouse: Int
  id: Int!
}

input CreatePositionInput {
  name: String!
  value: Int!
  pointGroup: Int!
  pointSingle: Int!
  pointHouse: Int!
}

input UpdatePositionInput {
  name: String
  value: Int
  pointGroup: Int
  pointSingle: Int
  pointHouse: Int
  id: Int!
}

input CreateCandidateProgrammeInput {
  programme_code: String!
  chestNo: Int!
  groupNumber: Int
}

input UpdateCandidateProgrammeInput {
  programme_code: String
  chestNo: Int
  groupNumber: Int
  id: Int!
}

input AddResult {
  chestNo: Int!
  totalMark: Float
  Position: Int
  markOne: Float!
  markTwo: Float
  markThree: Float
}

input CreateCategorySettingInput {
  category: String!
  maxProgram: Int!
  maxSingle: Int!
  minProgram: Int!
  minSingle: Int!
  maxGroup: Int!
  minGroup: Int!
}

input UpdateCategorySettingInput {
  category: String
  maxProgram: Int
  maxSingle: Int
  minProgram: Int
  minSingle: Int
  maxGroup: Int
  minGroup: Int
  id: Int!
}